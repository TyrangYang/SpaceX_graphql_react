{
	"version": 3,
	"sources": [
		"SpaceX.png",
		"components/LaunchItem.js",
		"components/MissionKey.js",
		"components/Launches.js",
		"components/LaunchDetail.js",
		"App.js",
		"serviceWorker.js",
		"index.js"
	],
	"names": [
		"module",
		"exports",
		"LaunchItem",
		"props",
		"launch",
		"flight_number",
		"mission_name",
		"launch_date_local",
		"launch_success",
		"className",
		"style",
		"width",
		"margin",
		"format",
		"to",
		"MissionKey",
		"LAUNCHES_QUERY",
		"gql",
		"Launches",
		"query",
		"loading",
		"error",
		"data",
		"console",
		"log",
		"getAllLaunches",
		"map",
		"each",
		"key",
		"reverse",
		"Component",
		"LAUNCH_DETAIL",
		"LaunchDetail",
		"this",
		"match",
		"params",
		"parseInt",
		"variables",
		"getLaunchById",
		"launch_year",
		"rocket",
		"rocket_id",
		"rocket_name",
		"rocket_type",
		"client",
		"ApolloClient",
		"uri",
		"App",
		"src",
		"logo",
		"alt",
		"display",
		"exact",
		"path",
		"component",
		"Boolean",
		"window",
		"location",
		"hostname",
		"ReactDOM",
		"render",
		"document",
		"getElementById",
		"navigator",
		"serviceWorker",
		"ready",
		"then",
		"registration",
		"unregister"
	],
	"mappings": "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",
	"file": "static/js/main.47adede1.chunk.js",
	"sourcesContent": [
		"module.exports = __webpack_public_path__ + \"static/media/SpaceX.fec84f4d.png\";",
		"import React from 'react'\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem(props) {\n    let { launch: { flight_number, mission_name, launch_date_local, launch_success } } = props;\n    return (\n        <div className=\"card card-body mb-3\" style={{ width: 1000, margin: 'auto' }}>\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission:{' '}\n                        <span className={launch_success ? \"text-success\" : \"text-danger\"}>\n                            {mission_name}\n                        </span>\n                    </h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment> </p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link className=\"btn btn-secondary\" to={`/launch/${flight_number}`}>Launch Detail</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n",
		"import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className='my-3'>\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    )\n}\n",
		"import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    query {\n        getAllLaunches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey></MissionKey>\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            console.log(data);\n                            if (error) console.log(error);\n                            if (loading) return <h4>loading...</h4>;\n                            else {\n                                return <div>\n                                    {\n                                        data.getAllLaunches &&\n                                        data.getAllLaunches.map((each) => (\n                                            <LaunchItem key={each.flight_number} launch={each} ></LaunchItem>\n                                        )).reverse()\n                                    }\n                                </div>;\n                            }\n                        }\n                    }\n                </Query>\n            </>\n        )\n    }\n}\n\nexport default Launches\n",
		"import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_DETAIL = gql`\n    query ($flight_number: Int){\n        getLaunchById(flight_number: $flight_number){\n            flight_number\n            mission_name\n            launch_year\n            launch_date_local\n            launch_success\n            rocket{\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class LaunchDetail extends Component {\n    render() {\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <>\n                <Query query={LAUNCH_DETAIL} variables={{ flight_number }}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (error) console.log(error);\n                            if (loading) return <h4>loading...</h4>;\n                            else {\n                                let { flight_number,\n                                    mission_name,\n                                    launch_year,\n                                    launch_date_local,\n                                    launch_success,\n                                    rocket: { rocket_id, rocket_name, rocket_type }\n                                } = data.getLaunchById;\n                                return <div>\n                                    <h1 className=\"display-4 my-3\" > <span className=\"text-dark\">Mission: </span>{mission_name}</h1>\n                                    <h4 className=\"mb-3\">Launch Detail:</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">\n                                            Flight number: {flight_number}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch year: {launch_year}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch date: {launch_date_local}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Success?: <span className={launch_success ? \"text-success\" : \"text-danger\"}>{launch_success ? \"Yes\" : \"No\"}</span>\n                                        </li>\n\n                                    </ul>\n                                    <h4 className=\"my-3\">Rocket Detail:</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">\n                                            Rocket id: {rocket_id}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket name: {rocket_name}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket type: {rocket_type}\n                                        </li>\n                                    </ul>\n                                </div>\n                            }\n                        }\n                    }\n                </Query>\n                <hr />\n                <Link className=\"btn btn-secondary\" to=\"/\">BACK</Link>\n            </>\n        )\n    }\n}\n\nexport default LaunchDetail\n",
		"import React from 'react';\nimport logo from './SpaceX.png';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css';\nimport Launches from './components/Launches';\nimport LaunchDetail from './components/LaunchDetail';\n\n\nconst deployUrl = \"http://spacexlunchrecord-env.etbpm3jw6e.us-east-2.elasticbeanstalk.com\";\n// const deployUrl = \"https://spacex-lunch-record.appspot.com\";\n\nconst client = new ApolloClient({\n    // uri: \"/graphql\"\n    // uri: \"http://localhost:4000/graphql\"\n    uri: `${deployUrl}/graphql`\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div className=\"container\">\n                    <img src={logo} alt=\"SpaceX\" style={{ width: 500, display: 'block', margin: 'auto' }}></img>\n                </div>\n                <Route exact path='/' component={Launches} />\n                <Route exact path='/launch/:flight_number' component={LaunchDetail} />\n                {/* <Route exact path='/*' render={\n                    <h1> error </h1>\n                } /> */}\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n",
		"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
		"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
	],
	"sourceRoot": ""
}
